<%@ Control Language="C#" AutoEventWireup="true" CodeFile="NeighborhoodSearch.ascx.cs" Inherits="Components_PropertyManager_NeighborhoodSearch" %>
<link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false&libraries=places"></script>
<script type="text/javascript">
    var search_options_auto = new Array('accounting', 'airport', 'amusement park', 'aquarium', 'art gallery', 'atm', 'bakery', 'bank', 'bar', 'beauty salon', 'bicycle store', 'book store', 'bowling alley', 'bus station', 'cafe', 'campground', 'car dealer', 'car rental', 'car repair', 'car wash', 'casino', 'cemetery', 'church', 'city hall', 'clothing store', 'convenience store', 'courthouse', 'dentist', 'department store', 'doctor', 'electrician', 'electronics store', 'embassy', 'establishment', 'finance', 'fire station', 'florist', 'food', 'funeral home', 'furniture store', 'gas station', 'general contractor', 'grocery or supermarket', 'gym', 'hair care', 'hardware store', 'health', 'hindu temple', 'home goods store', 'hospital', 'insurance agency', 'jewelry store', 'laundry', 'lawyer', 'library', 'liquor store', 'local government office', 'locksmith', 'lodging', 'meal delivery', 'meal takeaway', 'mosque', 'movie rental', 'movie theater', 'moving company', 'museum', 'night club', 'painter', 'park', 'parking', 'pet store', 'pharmacy', 'physiotherapist', 'place of worship', 'plumber', 'police', 'post office', 'real estate agency', 'restaurant', 'roofing contractor', 'rv park', 'school', 'shoe store', 'shopping mall', 'spa', 'stadium', 'storage', 'store', 'subway station', 'synagogue', 'taxi stand', 'train station', 'travel agency', 'university', 'veterinary care', 'zoo', 'natural feature');
    var map;
    var directionsDisplay;
    var directionsService = new google.maps.DirectionsService();
    var stepDisplay;
    var markersArray = [];
    var markerTypes = [];
    var latlng = new google.maps.LatLng(<%=center_lat%>, <%= center_long%>);
    $(document).ready(function() {
        directionsDisplay = new google.maps.DirectionsRenderer();
        $("input.autocomplete").autocomplete({
            source: search_options_auto
        });
        var myOptions = {
                zoom: <%= zoom %>,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById("map_canvas"),
        myOptions);
        
        var centerMarker = new google.maps.Marker({
              position: latlng,
              map: map,
              icon: '<%=centerIcon %>'
          });
        stepDisplay = new google.maps.InfoWindow();
        setTimeout("initialize();", 1000);
    });
    
    function initialize() {
        var request = {
            bounds: map.getBounds(),
            types: search_options
          };
      service = new google.maps.places.PlacesService(map);
      service.search(request, callback);
    }

    function callback(results, status) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        for (var i = 0; i < results.length; i++) {
          var place = results[i];
          getPlaceDetailsAndCreateMarker(place); 
        }
      }
      hideOverlays();
    }

    function getPlaceDetailsAndCreateMarker(place) {
        var detailsRequest = {
            reference: place.reference
        };

        service = new google.maps.places.PlacesService(map);
        service.getDetails(detailsRequest, createMarker);
    }

    function createMarker(place, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
            var placeLoc = place.geometry.location;
            var placeType = "";
            var i = 0;
            var j = 0;
            var found = false;
            var pin = '<%=map_pins_dir %>';
            for(j in place.types)
            {
                for(i in search_options)
                {
                    if(search_options[i] == place.types[j])
                    {
                        if(!found) {
                            pin = '<%=map_pins_dir %>' + place.types[j] + ".png";
                        }
                        if(placeType != "")
                        {
                            placeType += ",";
                        }
                        placeType += place.types[j];
                        found = true;
                        //alert(place.name + " -- " + placeType);
                    }
                    i++;
                }
                j++;
            }

        
            var marker = new google.maps.Marker({
                    position: place.geometry.location,
                    icon: pin,
                    //map: map,
                    title: place.name
                });
            markersArray.push(marker);
            markerTypes.push(placeType);

            var markerContent = "<h4>" + place.name + "</h4>";
            markerContent += place.formatted_address + "<br />";
            markerContent += place.formatted_phone_number + "<br />";
            markerContent += "<a href=\""+place.url+"\" target=\"_blank\">Google Place Page</a>";
            if(place.website != undefined && place.website != null && place.website != "") {
                markerContent += "<br /><a href=\""+place.website+"\" target=\"blank\">" + place.website+"</a>";
            }
            markerContent += "<h5>" +place.html_attributions + "</h5>";

            var infowindow = new google.maps.InfoWindow({
                content: markerContent
            });
            google.maps.event.addListener(marker, 'click', function() {
                infowindow.open(map,marker);
            });
        }
    }

    function hideOverlays() {
        if (markersArray) {
          for (i in markersArray) {
            markersArray[i].setMap(null);
          }
        }
      }

    function RepopulateMapText(reset)
    {
        if(reset) {
            ResetMap();
        
            $('.neighborhood-search-category-list').each(function() {
                $(this).find('li').each(function() {
                    if($(this).find('input').is(':checked'))
                    {
                        $(this).find('input').removeAttr("checked");
                    }
                });
             });
        }
        var types = new Array();
        var entered = $('.autocomplete').val();
        var i = 0;
        for(i = 0; i < search_options_auto.length; i ++)
        {
            if(search_options_auto[i] == entered)
            {
                types[0] = search_options[i];
            }
        }
        showOverlays(types);
    }

    function showOverlays(types)
    {
        for(var i = 0; i < markerTypes.length; i++)
        {
            for(var j = 0; j < types.length; j ++)
            {
                
                if(markerTypes[i].indexOf(types[j]) != -1)
                {
                    //alert(markersArray[i].title);
                    markersArray[i].setMap(map);
                }
                else
                {
                    //alert(markerTypes[i] + " -- " + types[j]);
                }
            } 
        }
    }

    function RepopulateMap(reset)
    {
        //alert(reset);
        if(reset == true) {
            ResetMap();
        }
        var types = [];
        var i = 0;
        $('.neighborhood-search-category-list').each(function() {
            $(this).find('li').each(function() {
                if($(this).find('input').is(':checked'))
                {
                    //alert($(this).find('input').val());
                    var typeList = $(this).find('input').val().split(';');
                    for(j in typeList)
                    {
                        types.push(typeList[j]);                        
                    }
                }
            });
        });

        showOverlays(types);
    }

    function ResetMap()
    {
        if(directionsDisplay.getMap() != null) {
           // alert(directionsDisplay.getMap());
            directionsDisplay.setMap(null);
            map.setCenter(latlng);
            map.setZoom(<%= zoom %>);
            $('#neighborhood-directions-street').val('');
            $('#neighborhood-directions-city').val('');
            $('#neighborhood-search-state').val('');
            $('#neighborhood-directions-zip').val('');
            $('#neighborhood-directions-right').html('');
        }
        hideOverlays();
    }

    function PlotDirections()
    {
        var origin = $('#neighborhood-directions-street').val();
        origin += " " + $('#neighborhood-directions-city').val() + ", ";
        origin += $('#neighborhood-search-state').val() + " ";
        origin += $('#neighborhood-directions-zip').val();

        directionsDisplay.setMap(map);
        var request = {
            origin:origin,
            destination:latlng,
            travelMode: google.maps.TravelMode.DRIVING
        };
        directionsService.route(request, function(result, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(result);
                showSteps(result);
            }
        });
    }

    function showSteps(directionResult) {
      // For each step, place a marker, and add the text to the marker's
      // info window. Also attach the marker to an array so we
      // can keep track of it and remove it when calculating new
      // routes.
      var myRoute = directionResult.routes[0].legs[0];
      var instr = "";
      for (var i = 0; i < myRoute.steps.length; i++) {
          instr += myRoute.steps[i].instructions + "<br />";
      }
      $('#neighborhood-directions-right').html('');
      $('#neighborhood-directions-right').append(instr);
    }
    
</script>
<div id="neighborhood-map">
    <div id="map_canvas" style="width:949px;height:352px;"></div>
</div>
<div class="community-interior-title neighborhood-search">
    Local Search
</div>
<div class="neighborhood-search-container">
    <div id="neighborhood-search-column-left">
        <p>
            Locate places by entering a keyword below (i.e. schools, banks, shopping etc) or choose from the categories to the right.
        </p>
        <div id="neighborhood-search-form">
            <asp:TextBox ID="txtAutoComplete" CssClass="autocomplete" runat="server"></asp:TextBox>
            <asp:ImageButton ID="imgSearchButton" OnClientClick="RepopulateMapText(true);return false;" CssClass="neighborhood-search-button" runat="server" ImageUrl="/images/community/neighborhood_search_btn.jpg" AlternateText="Search />
            <div class="break"></div>
        </div>
    </div>
    <div id="neighborhood-search-column-right">
        <ul class="neighborhood-search-category-list">
            <li>
                <input type="checkbox" id="grocery" value="grocery_or_supermarket;store;convenience_store;department_store" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Grocery</label>
                <div class="break"></div>
            </li>
            <li>
                <input type="checkbox" id="restaurant" value="food;bar;cafe;meal_delivery;meal_takeaway" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Restaurant</label>
                <div class="break"></div>
            </li>
            <li>
                <input type="checkbox" id="movies" value="movie_theater;movie_rental" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Movies</label>
                <div class="break"></div>
            </li>
            <li>
                <input type="checkbox" id="schools" value="school;university" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Schools</label>
                <div class="break"></div>
            </li>
            <li>
                <input type="checkbox" id="bookstores" value="book_store" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Bookstores</label>
                <div class="break"></div>
            </li>
        </ul>
        <ul class="neighborhood-search-category-list">
            <li>
                <input type="checkbox" id="parks" value="park;natural_feature" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Parks</label>
                <div class="break"></div>
            </li>
            <li>
                <input type="checkbox" id="libraries" value="library" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Libraries</label>
                <div class="break"></div>
            </li>
            <li>
                <input type="checkbox" id="clothing" value="clothing_store;department_store;home_goods_store;shopping_mall" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Clothing</label>
                <div class="break"></div>
            </li>
            <li>
                <input type="checkbox" id="fitness" value="gym;health" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Fitness</label>
                <div class="break"></div>
            </li>
            <li>
                <input type="checkbox" id="hardware" value="hardware_store;home_goods_store" onclick="RepopulateMap(true);" class="neighborhood-search-category" />
                <label>Hardware Stores</label>
                <div class="break"></div>
            </li>
        </ul>
        <div class="break"></div>
    </div>
    <div class="break"></div>
</div>
<div class="community-interior-title neighborhood-search">
    Driving Directions
</div>
<div class="neighborhood-search-container">
    <div id="neighborhood-directions-left">
        <p>Where are you starting from?</p>
        <div id="neighborhood-directions-form">
            <div class="form-column">
                <label>Street</label><br />
                <input type="text" id="neighborhood-directions-street" class="neighborhood-search-text" />
                <div class="break"></div>
                <label>State</label><br />
                <select name="neighborhood-search-state" class="neighborhood-search-state" id="neighborhood-search-state">
                    <option value="">State</option>
                    <option value="AL">Alabama</option> <option value="AZ">Arizona</option> <option value="AR">Arkansas</option> <option value="CA">California</option> <option value="CO">Colorado</option> <option value="CT">Connecticut</option> <option value="DE">Delaware</option> <option value="FL">Florida</option> <option value="GA">Georgia</option> <option value="ID">Idaho</option> <option value="IL">Illinois</option> <option value="IN">Indiana</option> <option value="IA">Iowa</option> <option value="KS">Kansas</option> <option value="KY">Kentucky</option> <option value="LA">Louisiana</option> <option value="ME">Maine</option> <option value="MD">Maryland</option> <option value="MA">Massachusetts</option> <option value="MI">Michigan</option> <option value="MN">Minnesota</option> <option value="MS">Mississippi</option> <option value="MO">Missouri</option> <option value="MT">Montana</option> <option value="NE">Nebraska</option> <option value="NV">Nevada</option> <option value="NH">New Hampshire</option> <option value="NJ">New Jersey</option> <option value="NM">New Mexico</option> <option value="NY">New York</option> <option value="NC">North Carolina</option> <option value="ND">North Dakota</option> <option value="OH">Ohio</option> <option value="OK">Oklahoma</option> <option value="OR">Oregon</option> <option value="PA">Pennsylvania</option> <option value="RI">Rhode Island</option> <option value="SC">South Carolina</option> <option value="SD">South Dakota</option> <option value="TN">Tennessee</option> <option value="TX">Texas</option> <option value="UT">Utah</option> <option value="VT">Vermont</option> <option value="VA">Virginia</option> <option value="WA">Washington</option> <option value="WV">West Virginia</option> <option value="WI">Wisconsin</option> <option value="WY">Wyoming</option>
                </select>
            </div>
            <div class="form-column" style="width:173px;">
                <label>City</label><br />
                <input type="text" id="neighborhood-directions-city" class="neighborhood-search-text" />
                <div class="break"></div>
                <label>Zip</label><br />
                <input type="text" id="neighborhood-directions-zip" class="neighborhood-search-text" style="width:60px;" />
                <asp:ImageButton ID="imgDirectionButton" CssClass="neighborhood-search-button" runat="server" OnClientClick="PlotDirections();return false;" ImageUrl="/images/community/neighborhood_directions_btn.jpg" AlternateText="Search" />
            </div>
            <div class="break"></div>
        </div>
    </div>

    <div id="neighborhood-directions-right">
        
    </div>
    <div class="break"></div>
</div>
